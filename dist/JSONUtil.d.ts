export type myFilterType = RegExp | string | number | ((a: any) => boolean);
export type ISortedStringHierarchy = Array<string | ISortedStringHierarchy>;
export type ISortedHierarchy = Array<any | ISortedHierarchy>;
declare class JSONUtilClass {
    getValueUsingKeyArray(obj: any, keypathArray?: (string | number)[]): any;
    setValueAt(obj: any, keypathArray: (string | number)[], val: any): any;
    deleteOnKeyPathsRef(obj: any, keypaths?: string[][]): any;
    keyPath2Array(keypath?: string, sep?: string): string[];
    array2Keypath(array?: string[], sep?: string): string;
    searchColsGetRow1(obj: any, query: Record<string, string | number>, arrayKeyPath?: string[]): any;
    searchArrayRowIndex(array: any[], query: Record<string, string | number>): number;
    searchColsGetRow1Regex(obj: any, query: Record<string, RegExp>, arrayKeyPath?: string[]): any;
    searchArrayColsGetList(obj: any, query: Record<string, string | number>, keyPath?: string[]): any[];
    filterArrayRows(table: any[] | Record<string, any>, query: Record<string, myFilterType>): any[];
    addToArrayTypeValue(rowSource: Record<string, any>, rowDest: Record<string, any>, arrayColumns?: string[]): Record<string, any>;
    convertStringTypeToValues(str: string, type: "object" | "array"): {};
    convert2StringType(data: any): string;
    convertArrayRowsToIDRows(array: any[], idCols2Use: string[]): {};
    getStrippedRow(row: object, allowKeys: string[]): {};
    modifyKeysWithValueMatchRegex(obj: any, regex?: RegExp, execute?: (obj: any, keyPath: any) => void): void;
    modifyObjectOnKeypaths(obj: any, keypaths?: string[]): any;
    deleteOnKeyPathsCopy(obj: any, keypaths?: string[][]): any;
    deleteOnOrderedHierarchyRefMatchKey(arrayObj: ISortedStringHierarchy, testFunc: (o: any) => boolean, removeUndefined?: boolean): ISortedStringHierarchy;
    getTrueString(array?: any): any;
    mergeIntoAt(objInto: any, useCopy: boolean, objOverrider: any, atKeyPathArray?: (string | number)[]): {};
    deepCopy(obj: any): any;
    tryParse(text: any): null;
    getRoughSizeOfObject(object: any): number;
    hasKeyPath(obj: any, keypathArray: (string | number)[]): boolean;
    createKeyPathInObject(obj: any, keypathArray: (string | number)[]): any;
    getKeyOfValue(obj: any, value: string): string;
    createKeySet(objects: Record<string, any>[]): any | null;
    getKeysMatchingValue(obj: any, testFunc?: (val: any) => boolean, curPath?: string, keyFilter?: (key: any) => boolean): string[];
    sortObjectKeys(obj: any): {};
    tryAlignSortArrayOfObjects(array1: any, array2: string[], keyLinks?: {}): {
        trues: number;
        falses: number;
        array2Length: number;
        array2SetLength: number;
        sortInlineWith1Length: number;
        array1Length: any;
        mergedLength: number;
        array1PlusFalsesLength: any;
        sortInlineWith1: string[];
    };
    getClosestMatch(arr?: never[]): void;
    getDifferenceIfFieldChanged(): void;
    getAllUniqueKeysInCollection(): void;
    log(json: any, color?: "yellow" | "normal" | "red" | "gray" | "blue" | "green" | "purple"): void;
    getRandomSortArray(array: any, limit?: number): any[];
}
declare const JSONUtil: JSONUtilClass;
export default JSONUtil;
